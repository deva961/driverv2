// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  DRIVER
  USER
}

enum Status {
  ASSIGNED
  PENDING
  COMPLETED
}

model User {
  id       String   @id @default(uuid())
  name     String
  phone    String   @unique
  email    String?
  password String
  role     Role     @default(USER)
  manager  Manager?
  driver   Driver?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String     @id @default(uuid())
  name      String     @unique
  showrooms Showroom[] // One category can have many showrooms

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Showroom {
  id         String   @id @default(uuid())
  name       String   @unique
  location   String?
  categoryId String
  managerId  String?  @unique
  drivers    Driver[] // One showroom can have many drivers

  category Category @relation(fields: [categoryId], references: [id]) // Relation to Category
  manager  Manager? @relation // No need for fields and references here

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Manager {
  id         String   @id @default(uuid())
  userId     String   @unique
  showroom   Showroom @relation(fields: [showroomId], references: [id]) // Specify relation here
  showroomId String   @unique

  user User @relation(fields: [userId], references: [id])

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Assignment Assignment[]
}

model Driver {
  id         String  @id @default(uuid())
  userId     String  @unique
  employeeId String  @unique
  license    String
  licenseImg String?
  showroomId String?

  showroom Showroom? @relation(fields: [showroomId], references: [id])
  user     User      @relation(fields: [userId], references: [id])

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Assignment Assignment[]
}

model Assignment {
  id                 String   @id @default(uuid())
  driverId           String
  managerId          String?
  showroomId         String?
  pickupDate         DateTime
  carPlate           String
  type               String?
  transportationType String?
  images             String[]
  status             Status   @default(ASSIGNED)

  driver    Driver   @relation(fields: [driverId], references: [id])
  manager   Manager? @relation(fields: [managerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
